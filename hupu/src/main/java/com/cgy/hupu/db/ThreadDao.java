package com.cgy.hupu.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "THREAD".
*/
public class ThreadDao extends AbstractDao<Thread, Long> {

    public static final String TABLENAME = "THREAD";

    /**
     * Properties of entity Thread.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Tid = new Property(1, String.class, "tid", false, "TID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Puid = new Property(3, String.class, "puid", false, "PUID");
        public final static Property Fid = new Property(4, String.class, "fid", false, "FID");
        public final static Property Replies = new Property(5, String.class, "replies", false, "REPLIES");
        public final static Property UserName = new Property(6, String.class, "userName", false, "USER_NAME");
        public final static Property Time = new Property(7, String.class, "time", false, "TIME");
        public final static Property ForumName = new Property(8, String.class, "forumName", false, "FORUM_NAME");
        public final static Property LightReply = new Property(9, Integer.class, "lightReply", false, "LIGHT_REPLY");
        public final static Property Type = new Property(10, Integer.class, "type", false, "TYPE");
        public final static Property ForumId = new Property(11, Long.class, "forumId", false, "FORUM_ID");
    }

    private DaoSession daoSession;


    public ThreadDao(DaoConfig config) {
        super(config);
    }
    
    public ThreadDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"THREAD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"TID\" TEXT," + // 1: tid
                "\"TITLE\" TEXT," + // 2: title
                "\"PUID\" TEXT," + // 3: puid
                "\"FID\" TEXT," + // 4: fid
                "\"REPLIES\" TEXT," + // 5: replies
                "\"USER_NAME\" TEXT," + // 6: userName
                "\"TIME\" TEXT," + // 7: time
                "\"FORUM_NAME\" TEXT," + // 8: forumName
                "\"LIGHT_REPLY\" INTEGER," + // 9: lightReply
                "\"TYPE\" INTEGER," + // 10: type
                "\"FORUM_ID\" INTEGER);"); // 11: forumId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"THREAD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Thread entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String tid = entity.getTid();
        if (tid != null) {
            stmt.bindString(2, tid);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String puid = entity.getPuid();
        if (puid != null) {
            stmt.bindString(4, puid);
        }
 
        String fid = entity.getFid();
        if (fid != null) {
            stmt.bindString(5, fid);
        }
 
        String replies = entity.getReplies();
        if (replies != null) {
            stmt.bindString(6, replies);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(7, userName);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(8, time);
        }
 
        String forumName = entity.getForumName();
        if (forumName != null) {
            stmt.bindString(9, forumName);
        }
 
        Integer lightReply = entity.getLightReply();
        if (lightReply != null) {
            stmt.bindLong(10, lightReply);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(11, type);
        }
 
        Long forumId = entity.getForumId();
        if (forumId != null) {
            stmt.bindLong(12, forumId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Thread entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String tid = entity.getTid();
        if (tid != null) {
            stmt.bindString(2, tid);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String puid = entity.getPuid();
        if (puid != null) {
            stmt.bindString(4, puid);
        }
 
        String fid = entity.getFid();
        if (fid != null) {
            stmt.bindString(5, fid);
        }
 
        String replies = entity.getReplies();
        if (replies != null) {
            stmt.bindString(6, replies);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(7, userName);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(8, time);
        }
 
        String forumName = entity.getForumName();
        if (forumName != null) {
            stmt.bindString(9, forumName);
        }
 
        Integer lightReply = entity.getLightReply();
        if (lightReply != null) {
            stmt.bindLong(10, lightReply);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(11, type);
        }
 
        Long forumId = entity.getForumId();
        if (forumId != null) {
            stmt.bindLong(12, forumId);
        }
    }

    @Override
    protected final void attachEntity(Thread entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Thread readEntity(Cursor cursor, int offset) {
        Thread entity = new Thread( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // puid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fid
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // replies
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // time
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // forumName
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // lightReply
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // type
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11) // forumId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Thread entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setTid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPuid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setReplies(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setForumName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLightReply(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setType(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setForumId(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Thread entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Thread entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Thread entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getForumDao().getAllColumns());
            builder.append(" FROM THREAD T");
            builder.append(" LEFT JOIN FORUM T0 ON T.\"FORUM_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Thread loadCurrentDeep(Cursor cursor, boolean lock) {
        Thread entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Forum forum = loadCurrentOther(daoSession.getForumDao(), cursor, offset);
        entity.setForum(forum);

        return entity;    
    }

    public Thread loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Thread> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Thread> list = new ArrayList<Thread>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Thread> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Thread> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
