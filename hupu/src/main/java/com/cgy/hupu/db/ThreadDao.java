package com.cgy.hupu.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "THREAD".
*/
public class ThreadDao extends AbstractDao<Thread, Long> {

    public static final String TABLENAME = "THREAD";

    /**
     * Properties of entity Thread.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Tid = new Property(1, String.class, "tid", false, "TID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Puid = new Property(3, String.class, "puid", false, "PUID");
        public final static Property Fid = new Property(4, String.class, "fid", false, "FID");
        public final static Property Replies = new Property(5, String.class, "replies", false, "REPLIES");
        public final static Property UserName = new Property(6, String.class, "userName", false, "USER_NAME");
        public final static Property Time = new Property(7, String.class, "time", false, "TIME");
        public final static Property ForumName = new Property(8, String.class, "forumName", false, "FORUM_NAME");
        public final static Property LightReply = new Property(9, Integer.class, "lightReply", false, "LIGHT_REPLY");
        public final static Property Type = new Property(10, Integer.class, "type", false, "TYPE");
        public final static Property Forum = new Property(11, String.class, "forum", false, "FORUM");
    }

    private final ForumConvert forumConverter = new ForumConvert();

    public ThreadDao(DaoConfig config) {
        super(config);
    }
    
    public ThreadDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"THREAD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"TID\" TEXT," + // 1: tid
                "\"TITLE\" TEXT," + // 2: title
                "\"PUID\" TEXT," + // 3: puid
                "\"FID\" TEXT," + // 4: fid
                "\"REPLIES\" TEXT," + // 5: replies
                "\"USER_NAME\" TEXT," + // 6: userName
                "\"TIME\" TEXT," + // 7: time
                "\"FORUM_NAME\" TEXT," + // 8: forumName
                "\"LIGHT_REPLY\" INTEGER," + // 9: lightReply
                "\"TYPE\" INTEGER," + // 10: type
                "\"FORUM\" TEXT);"); // 11: forum
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"THREAD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Thread entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String tid = entity.getTid();
        if (tid != null) {
            stmt.bindString(2, tid);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String puid = entity.getPuid();
        if (puid != null) {
            stmt.bindString(4, puid);
        }
 
        String fid = entity.getFid();
        if (fid != null) {
            stmt.bindString(5, fid);
        }
 
        String replies = entity.getReplies();
        if (replies != null) {
            stmt.bindString(6, replies);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(7, userName);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(8, time);
        }
 
        String forumName = entity.getForumName();
        if (forumName != null) {
            stmt.bindString(9, forumName);
        }
 
        Integer lightReply = entity.getLightReply();
        if (lightReply != null) {
            stmt.bindLong(10, lightReply);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(11, type);
        }
 
        Forum forum = entity.getForum();
        if (forum != null) {
            stmt.bindString(12, forumConverter.convertToDatabaseValue(forum));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Thread entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String tid = entity.getTid();
        if (tid != null) {
            stmt.bindString(2, tid);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String puid = entity.getPuid();
        if (puid != null) {
            stmt.bindString(4, puid);
        }
 
        String fid = entity.getFid();
        if (fid != null) {
            stmt.bindString(5, fid);
        }
 
        String replies = entity.getReplies();
        if (replies != null) {
            stmt.bindString(6, replies);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(7, userName);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(8, time);
        }
 
        String forumName = entity.getForumName();
        if (forumName != null) {
            stmt.bindString(9, forumName);
        }
 
        Integer lightReply = entity.getLightReply();
        if (lightReply != null) {
            stmt.bindLong(10, lightReply);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(11, type);
        }
 
        Forum forum = entity.getForum();
        if (forum != null) {
            stmt.bindString(12, forumConverter.convertToDatabaseValue(forum));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Thread readEntity(Cursor cursor, int offset) {
        Thread entity = new Thread( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // puid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fid
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // replies
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // time
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // forumName
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // lightReply
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // type
            cursor.isNull(offset + 11) ? null : forumConverter.convertToEntityProperty(cursor.getString(offset + 11)) // forum
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Thread entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setTid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPuid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setReplies(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setForumName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLightReply(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setType(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setForum(cursor.isNull(offset + 11) ? null : forumConverter.convertToEntityProperty(cursor.getString(offset + 11)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Thread entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Thread entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Thread entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
